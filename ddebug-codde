- hosts: localhost
  connection: local
  gather_facts: false
  serial: 1
  vars:
    region: us-east-1
    ansible_python_interpreter: /bin/python3

  tasks:
    - name: Gather information about any instance with hostname starting with elkabdvd
      amazon.aws.ec2_instance_info:
        region: "{{ region }}"
        filters:
          "tag:hostname": "elkabdvd*"
          instance-state-name: "running"
      register: ec2_node_info

    - name: Fail if no instances found
      fail:
        msg: "No instances found with the tag hostname starting with elkabdvd in region {{ region }}"
      when: ec2_node_info.instances | length == 0

    - name: Display kernel version for each instance
      shell: uname -r
      register: kernel_version
      remote_user: p5us
      become: true
      delegate_to: "{{ item.public_ip_address | default(item.private_ip_address) }}"
      loop: "{{ ec2_node_info.instances }}"
      when: ec2_node_info.instances | length > 0
      ignore_errors: true

    - name: Debug kernel version
      debug:
        msg: "Kernel version for instance {{ item.instance_id }}: {{ kernel_version.stdout if kernel_version is defined else 'Not defined' }}"
      loop: "{{ ec2_node_info.instances }}"

    - name: Append kernel version to instance data
      set_fact:
        ec2_instances_with_kernel: "{{ ec2_instances_with_kernel | default([]) + [{'instance_id': item.instance_id, 'kernel_version': kernel_version.stdout if kernel_version is defined else 'No kernel version found'}] }}"
      loop: "{{ ec2_node_info.instances }}"

    - name: Debug ec2_instances_with_kernel
      debug:
        var: ec2_instances_with_kernel

    - name: Fail if no instances have kernel data
      fail:
        msg: "No instances with valid kernel data found"
      when: ec2_instances_with_kernel | length == 0

    - name: Tag instances with their kernel version
      amazon.aws.ec2_tag:
        region: "{{ region }}"
        state: present
        resource: "{{ item.instance_id }}"
        tags:
          KernelVersion: "{{ item.kernel_version }}"
      loop: "{{ ec2_instances_with_kernel }}"
