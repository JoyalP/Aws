- hosts: localhost
  connection: local
  gather_facts: false
  vars:
    region: us-east-1
    ansible_python_interpreter: /bin/python3
    ec2_instances_with_kernel: []

  tasks:
    # Step 1: Get EC2 Instances Matching the Criteria
    - name: Gather information about instances with hostname starting with elkabdvd
      amazon.aws.ec2_instance_info:
        region: "{{ region }}"
        filters:
          "tag:hostname": "elkabdvd*"
          instance-state-name: "running"
      register: ec2_node_info

    - name: Fail if no instances found
      fail:
        msg: "No running instances found with the tag hostname starting with elkabdvd in region {{ region }}"
      when: ec2_node_info.instances | length == 0

    # Step 2: Run uname -r on Each Instance and Collect Kernel Versions
    - name: Collect kernel versions from each instance
      shell: uname -r
      register: kernel_result
      remote_user: p5us
      become: true
      delegate_to: "{{ item.public_ip_address | default(item.private_ip_address) }}"
      loop: "{{ ec2_node_info.instances }}"
      when: ec2_node_info.instances | length > 0
      ignore_errors: true

    # Step 3: Append Kernel Versions to Instance Data
    - name: Map kernel versions to instance data
      set_fact:
        ec2_instances_with_kernel: "{{ ec2_instances_with_kernel + [{'instance_id': item.instance_id, 'kernel_version': (item.result.stdout.strip() if 'stdout' in item.result else 'No kernel version found')}] }}"
      loop: "{{ ec2_node_info.instances }}"
      loop_control:
        label: "{{ item.instance_id }}"
      vars:
        item.result: "{{ kernel_result.results[loop.index0] }}"

    - name: Debug collected instance data
      debug:
        var: ec2_instances_with_kernel

    # Step 4: Tag Instances in AWS
    - name: Tag instances with their kernel version
      amazon.aws.ec2_tag:
        region: "{{ region }}"
        state: present
        resource: "{{ item.instance_id }}"
        tags:
          KernelVersion: "{{ item.kernel_version }}"
      loop: "{{ ec2_instances_with_kernel }}"
      when: item.kernel_version is defined
